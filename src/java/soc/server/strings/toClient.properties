# JSettlers i18n localization strings: At Server to send to Client.
#  This file is part of Java Settlers - An online multiplayer version of the game Settlers of Catan
#
# This file Copyright (C) 2013 Jeremy D Monin <jdmonin@nand.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/ .
#
# Reminders about .properties filenames and format:
# - For a locale, the filename is bundlename_lang.properties or (more specific) bundlename_lang_COUNTRY.properties,
#    where lang and country are 2 or 3 characters each.  Keys not found there must be in bundlename.properties.
# - Logically related keys are grouped together in the files, with blank lines separating the groups.
#    Keys within a group might be alphabetical or chronological (based on usual game play).  The groups are ordered
#    in the file with common groups first, then mostly chronologically, then rarely used groups near the end of the file.  
# - Key names are case-sensitive; jsettlers uses mostly-lowercase alphanumeric keys, and "." to organize keys into hierarchies.
# - Parsing a key = value pair, the whitespace around "=" is stripped, but a value's trailing whitespace is kept.  If a
#    value begins with whitespace, use backslash to escape that.  For more info see the java.util.Properties.load javadoc.
#    Best practice in jsettlers is to not use leading or trailing whitespace unless unavoidable, and always comment the
#    reason in the java code and above the properties key-value pair.
# - The encoding must be ISO-8859-1, not UTF-8; see the java.util.Properties javadoc for details.
#    Backslashes must be doubled.  Tab, newline and carriage return are encoded as in Java strings (backslash-t, backslash-n, etc)
#
# Reminders about the format used for text with arguments by SOCStringManager.get and MessageFormat.format:
# - Single-quote characters must be doubled: ''  Left curly brackets must be single-quoted: '{'
# - Message argument numbers start at 0: It''s {0}''s turn to roll the dice.
# - Message arguments can have a format type: {0} rolled a {1,number}.  See java.text.MessageFormat javadoc.
# - JSettlers has special types parsed by SOCStringManager.getSpecial, see its javadoc: {0,list}, {0,rsrcs}, etc

base.emptylist.nothing = nothing

resources.clay = Clay
resources.ore = Ore
resources.sheep = Sheep
resources.wheat = Wheat
resources.wood = Wood

# spec.* is for SOCStringManager.getSpecial; this section must be identical in the client and server string properties files

# spec.rsrcs.* is for {#,rsrcs}
spec.rsrcs.1clay = 1 clay
spec.rsrcs.1ore = 1 ore
spec.rsrcs.1sheep = 1 sheep
spec.rsrcs.1wheat = 1 wheat
spec.rsrcs.1wood = 1 wood
spec.rsrcs.1unknown = 1 resource of unknown type {0}
spec.rsrcs.nclay = {0,number} clay
spec.rsrcs.nore = {0,number} ore
spec.rsrcs.nsheep = {0,number} sheep
spec.rsrcs.nwheat = {0,number} wheat
spec.rsrcs.nwood = {0,number} wood
spec.rsrcs.nunknown = {0,number} resources of unknown type {1}
spec.rsrcs.none = nothing

# spec.dcards.* is for {#,dcards}
#   These are used in SOCDevCard.getCardTypeName, and its server callers messageToGameKeyedSpecial and messageToPlayerKeyedSpecial
spec.dcards.unknown = unknown card
spec.dcards.discoveryplenty = Year of Plenty
spec.dcards.knightsoldier = Soldier
spec.dcards.knightsoldier.warship = Warship
spec.dcards.monopoly = Monopoly
spec.dcards.roadbuilding = Road Building
spec.dcards.capgovhouse = Gov. House (1VP)
spec.dcards.libmarket = Market (1VP)
spec.dcards.university = University (1VP)
spec.dcards.temple = Temple (1VP)
spec.dcards.towerchapel = Chapel (1VP)
spec.dcards.aunknown = an unknown card
spec.dcards.adiscoveryplenty = a Year of Plenty
spec.dcards.aknightsoldier = a Soldier
spec.dcards.aknightsoldier.warship = a Warship
spec.dcards.amonopoly = a Monopoly
spec.dcards.aroadbuilding = a Road Building
spec.dcards.acapgovhouse = a Gov.House (+1VP)
spec.dcards.alibmarket = a Market (+1VP)
spec.dcards.auniversity = a University (+1VP)
spec.dcards.atemple = a Temple (+1VP)
spec.dcards.atowerchapel = a Chapel (+1VP)

# i18n.listitems.* is for I18n.listItems; this section must be identical in the client and server string properties files
# i18n.listitems.item should have a trailing space to make room before the next item, if the language uses spaces
i18n.listitems.nothing = nothing
i18n.listitems.2 = {0} and {1}
i18n.listitems.item = {0}, 
i18n.listitems.finalitem = and {0}

member.bot.join.cantfind=*** Can''t find a robot! ***
member.bot.join.fetching=Fetching a robot player...
member.bot.join.interror.version=Internal error: The robots can''t join this game; game''s version {0} is newer than the robots.
member.bot.join.no.bots.server=No robot can join the game, there are no robots on this server.
member.left.game={0} left the game

prompt.turn.to.build.road=It''s {0}''s turn to build a road.
prompt.turn.to.build.road.or.ship=It''s {0}''s turn to build a road or ship.
prompt.turn.to.build.stlmt=It''s {0}''s turn to build a settlement.
prompt.turn.to.roll.dice=It''s {0}''s turn to roll the dice.
prompt.discard.1={0} needs to discard.
prompt.discard.n={0,list} need to discard.
prompt.pick.gold.1={0} needs to pick resources from the gold hex.
prompt.pick.gold.n={0,list} need to pick resources from the gold hex.

reply.not.your.turn = It''s not your turn.
reply.playdevcard.cannot.now = You can''t play {0,dcards} card now.
reply.playdevcard.type.unknown = That card type is unknown.

action.picking.random.starting.player=Randomly picking a starting player...
action.built.city={0} built a city.
action.built.road={0} built a road.
action.built.ship={0} built a ship.
action.built.stlmt={0} built a settlement.
action.built.nextturn.7.houserule=Starting next turn, dice rolls of 7 may occur (house rule).
action.card.discoveryplenty={0} played a Year of Plenty card.
action.card.mono={0} played a Monopoly card.
action.card.roadbuilding={0} played a Road Building card.
action.card.road.place.1r=You may place your 1 remaining road.
action.card.road.place.1s=You may place your 1 remaining road or ship.
action.card.road.place.2r=You may place 2 roads.
action.card.road.place.2s=You may place 2 roads/ships.
action.card.soldier={0} played a Soldier card.
action.card.soldier.warship={0} converted a ship to a warship.
action.discarded={0} discarded {1,number} resources.
action.picked.rsrcs={0} has picked {1,rsrcs}.
action.picked.rsrcs.goldhex={0} has picked {1,rsrcs} from the gold hex.

resetboard.doit.announce.playerwholeft=>>> Game {0} board reset by a player who left
resetboard.doit.announce.requester=>>> Game {0} board reset by {1}
resetboard.doit.interror=>>> Internal error, Game {0} board reset failed
resetboard.request.everyone.left=>>> Everyone has left this game. Please start a new game with players or bots.
resetboard.request.unlock.bot=Please unlock at least one bot, so you will have an opponent.
resetboard.vote.request={0} requests a board reset - other players please vote.
resetboard.vote.request.alloldcli=>>> {0} is resetting the game - other connected players are unable to vote (client too old).

stats.game.title=-- Game statistics: --
stats.game.rounds=Rounds played: {0,number}
stats.game.startedago=This game started {0,number} minutes ago.
stats.game.willexpire=>>> This game will expire in {0,number} minutes.

debug.dev.gets = ### {0} gets {1,dcards} card.

endgame.player.has.vpcards = {0} has {1,dcards}.
